# Product Requirements Document: RolexReserve Pro

## Technical Architecture

### System Components

1. **Desktop Client Application**
   - Electron 기반 Windows 데스크톱 애플리케이션
   - React 프론트엔드 UI와 Material-UI 디자인 시스템
   - 4개 매장 동시 자동화 컨트롤러
   - 로컬 상태 관리 및 설정 저장소
   - 사용자 인터페이스 및 대시보드 모듈

2. **Multi-Store Automation Engine**
   - Playwright 기반 브라우저 제어 모듈
   - 4개 매장 동시 예약 자동화:
     ```
     롯데 명동 (크로노다임): https://www.chronodigmwatch.co.kr/rolex/contact-seoul/appointment/
     현대 판교 (우노와치): https://www.unopangyo.com/rolex/contact-gyeonggi/
     현대 무역 (현대시계): https://www.hyundaiwatch.co.kr/rolex/contact-seoul/appointment/
     롯데 서면 (홍보시계): https://www.hongbowatch.co.kr/rolex/contact-busan/appointment/
     ```
   - 매장별 독립 브라우저 인스턴스 관리자
   - 인간형 행동 시뮬레이션 엔진
   - reCAPTCHA 회피 및 최적화 모듈

3. **Authentication & Session Management**
   - 사용자 인증 서비스 (Vercel 호스팅)
   - API 클라이언트 및 통신 모듈
   - 세션 상태 관리 및 동기화 시스템
   - PASS 인증 순차 핸드오프 컨트롤러

4. **Real-time Dashboard**
   - 실시간 예약 상태 모니터링 패널
   - 4개 매장 통합 진행 상황 시각화
   - 성공/실패 결과 표시 및 알림
   - 예약 이력 및 통계 대시보드

5. **Backend Services (Vercel)**
   - Next.js API 엔드포인트
   - MongoDB 데이터 접근 계층
   - 사용자 관리 및 계정 서비스
   - 로깅 및 분석 서비스

### Data Models

1. **User**
   ```json
   {
     "_id": "ObjectId",
     "email": "String",
     "password": "String (hashed)",
     "name": "String",
     "phone": "String",
     "createdAt": "Date",
     "lastActivity": "Date"
   }
   ```

2. **UserSession**
   ```json
   {
     "_id": "ObjectId",
     "userId": "ObjectId",
     "sessionToken": "String",
     "deviceInfo": "Object",
     "createdAt": "Date",
     "expiresAt": "Date",
     "active": "Boolean"
   }
   ```

3. **ReservationProfile**
   ```json
   {
     "_id": "ObjectId",
     "userId": "ObjectId",
     "defaultInfo": {
       "name": "String",
       "phone": "String",
       "email": "String"
     },
     "storePreferences": [
       {
         "storeId": "String",
         "enabled": "Boolean",
         "purpose": "String",
         "priority": "Number"
       }
     ]
   }
   ```

4. **ReservationProcess**
   ```json
   {
     "_id": "ObjectId",
     "userId": "ObjectId", 
     "stores": [
       {
         "storeId": "String",
         "status": "String", // idle, waiting, processing, success, failed
         "stage": "String", // selection, agreement, date_selection, pass_auth, form, confirmation, complete
         "progress": "Number",
         "lastActivity": "Date",
         "result": "String",
         "error": "String"
       }
     ],
     "startTime": "Date",
     "endTime": "Date",
     "overallStatus": "String",
     "logs": "Array"
   }
   ```

5. **Dashboard State**
   ```json
   {
     "activeReservation": "ObjectId",
     "storeStatuses": [
       {
         "storeId": "String",
         "displayName": "String",
         "status": "String",
         "stage": "String",
         "progress": "Number",
         "requiresAttention": "Boolean",
         "message": "String"
       }
     ],
     "overallProgress": "Number",
     "currentAuthStore": "String",
     "estimatedCompletion": "Date"
   }
   ```

### APIs and Integrations

1. **Authentication API**
   - `POST /api/auth/register` - 사용자 등록
   - `POST /api/auth/login` - 로그인 및 세션 토큰 발급
   - `POST /api/auth/logout` - 로그아웃 및 세션 종료
   - `GET /api/auth/verify` - 세션 유효성 검증

2. **Profile Management API**
   - `GET /api/profile` - 사용자 프로필 조회
   - `POST /api/profile` - 프로필 생성/업데이트
   - `GET /api/profile/stores` - 매장 설정 조회
   - `POST /api/profile/stores` - 매장 설정 업데이트

3. **Reservation API**
   - `POST /api/reservation/start` - 예약 프로세스 시작
   - `GET /api/reservation/status/:id` - 예약 상태 조회
   - `POST /api/reservation/auth-complete/:id` - 인증 완료 알림
   - `GET /api/reservation/history` - 예약 이력 조회

4. **Third-Party Integrations**
   - NTP 서버 시간 동기화
   - 인증 토큰 관리
   - 온라인 업데이트 서비스

### Infrastructure Requirements

1. **Desktop Client**
   - Windows 10+ 환경 (64비트)
   - 최소 8GB RAM, 쿼드코어 프로세서
   - 안정적인 인터넷 연결
   - 로컬 데이터 저장소

2. **Backend Infrastructure**
   - Vercel 서버리스 환경
   - MongoDB Atlas 클라우드 데이터베이스
   - JWT 인증 시스템
   - HTTPS 보안 연결

3. **배포 인프라**
   - Electron 애플리케이션 빌드 파이프라인
   - 자동 업데이트 메커니즘
   - 설치 관리 시스템

## Development Roadmap

### Phase 1: MVP Foundation - 단일 매장 자동화 및 기본 대시보드
1. **기본 데스크톱 애플리케이션 프레임워크**
   - Electron 프로젝트 설정
   - React 개발 환경 통합
   - 기본 UI 레이아웃 구현
   - 설정 저장 및 로딩 메커니즘

2. **단일 매장(크로노다임) 자동화 엔진**
   - Playwright 통합 및 브라우저 제어
   - 예약 프로세스 단계 자동화 구현
   - 기본 인간형 동작 시뮬레이션
   - 타이머 및 자동 실행 기능

3. **기본 대시보드 및 상태 관리**
   - 단일 매장 상태 모니터링 UI
   - 진행 단계 및 상태 시각화
   - 기본 예약 결과 표시
   - PASS 인증 알림 및 핸드오프

4. **로컬 프로필 관리**
   - 사용자 설정 저장 및 관리
   - 예약 정보 양식 설정
   - 로컬 스토리지 데이터 암호화
   - 기본 설정 인터페이스

### Phase 2: Multi-Store Automation & Enhanced Dashboard
1. **4개 매장 동시 자동화 구현**
   - 추가 매장 통합 (판교, 무역, 서면)
   - 매장별 페이지 구조 분석 및 자동화
   - 병렬 브라우저 세션 관리
   - 리소스 사용 최적화

2. **고급 통합 대시보드**
   - 4개 매장 동시 모니터링 인터페이스
   - 실시간 상태 업데이트 및 시각화
   - 매장별 진행 상황 카드 뷰
   - 종합 예약 상태 및 통계

3. **순차적 PASS 인증 시스템**
   - 매장별 인증 필요 상태 감지
   - 우선순위 기반 인증 순서 관리
   - 시각/청각 알림 시스템
   - 인증 완료 후 자동 재개

4. **백엔드 통합 준비**
   - API 클라이언트 구현
   - 인증 및 세션 관리 설계
   - 데이터 동기화 메커니즘
   - 오프라인 작동 지원

### Phase 3: Cloud Integration & Advanced Automation
1. **Vercel 백엔드 통합**
   - Next.js API 서비스 구축
   - MongoDB 연결 및 데이터 모델 구현
   - 사용자 인증 및 세션 관리
   - 예약 데이터 클라우드 동기화

2. **고급 자동화 기능**
   - reCAPTCHA 회피 최적화
   - 고급 인간형 행동 패턴
   - 에러 감지 및 복구 메커니즘
   - 동적 페이지 변화 대응

3. **사용자 경험 향상**
   - 직관적인 설정 마법사
   - 시각적으로 개선된 대시보드
   - 예약 결과 상세 보고서
   - 인터랙티브 상태 시각화

4. **로깅 및 분석 시스템**
   - 상세 로그 수집 및 저장
   - 문제 진단 및 보고 기능
   - 성공률 추적 및 분석
   - 데이터 기반 최적화

### Phase 4: Optimization & Enhancement
1. **성능 최적화**
   - 리소스 사용 효율화
   - 시작 및 로딩 시간 단축
   - 메모리 관리 개선
   - 다중 브라우저 성능 최적화

2. **보안 강화**
   - End-to-End 암호화 구현
   - 민감 정보 보호 메커니즘
   - API 통신 보안 강화
   - 인증 토큰 관리 개선

3. **자동 업데이트 시스템**
   - 클라이언트 자동 업데이트 기능
   - 버전 관리 및 변경 사항 알림
   - 롤백 및 복구 메커니즘
   - 업데이트 배포 관리

4. **추가 사용자 설정**
   - 고급 매장 우선순위 설정
   - 리소스 사용 관리 옵션
   - 테마 및 UI 커스터마이징
   - 키보드 단축키 및 접근성

### Phase 5: Advanced Features & Scalability
1. **추가 매장 확장 지원**
   - 새로운 매장 추가 메커니즘
   - 자동화 템플릿 시스템
   - 매장별 커스텀 설정
   - 자동 구조 분석 및 적응

2. **고급 알림 시스템**
   - 이메일 알림 통합
   - 중요 이벤트 알림
   - 알림 설정 및 관리
   - 모바일 푸시 알림 (선택적)

3. **고급 통계 및 보고**
   - 예약 패턴 분석
   - 성공률 추적 및 시각화
   - 성능 매트릭스 및 인사이트
   - 데이터 내보내기 및 보고서

4. **확장 가능한 아키텍처**
   - 모듈식 구조 개선
   - 플러그인 시스템 도입
   - 확장성 있는 API 설계
   - 서드파티 통합 지원

## Logical Dependency Chain

### 1. Foundation Layer (First Priority)
1. **기본 Electron 프레임워크**
   - 애플리케이션 쉘 및 윈도우 관리
   - React 개발 환경 설정
   - 기본 UI/UX 스켈레톤
   - 빌드 및 패키징 파이프라인

2. **단일 매장 자동화 엔진**
   - Playwright 통합
   - 브라우저 자동화 기본 기능
   - 크로노다임 매장 예약 흐름
   - 기본 상태 관리 및 오류 처리

3. **시각적 대시보드 기반**
   - 기본 대시보드 레이아웃
   - 단일 매장 상태 표시
   - 성공/실패 결과 화면
   - 사용자 설정 인터페이스

### 2. Multi-Store Layer (Second Priority)
1. **4개 매장 동시 지원**
   - 추가 매장 자동화 코드
   - 브라우저 인스턴스 관리
   - 매장별 상태 관리
   - 공유 설정 구현

2. **통합 모니터링 대시보드**
   - 4개 매장 상태 카드 뷰
   - 실시간 상태 업데이트
   - 진행 상황 시각화
   - 결과 요약 화면

3. **PASS 인증 순차 처리**
   - 인증 시점 감지
   - 알림 시스템
   - 인증 순서 관리
   - 인증 완료 후 재개

### 3. Enhancement Layer (Third Priority)
1. **Vercel 백엔드 통합**
   - API 설계 및 구현
   - MongoDB 통합
   - 사용자 인증 시스템
   - 데이터 동기화 메커니즘

2. **고급 자동화 기능**
   - reCAPTCHA 최적화
   - 인간형 행동 패턴
   - 오류 복구 시스템
   - 자동 적응 메커니즘

3. **사용자 경험 개선**
   - 설정 마법사
   - 고급 시각화 도구
   - 결과 보고 화면
   - 인터랙티브 컨트롤

### 4. Optimization Layer (Final Priority)
1. **성능 및 안정성**
   - 리소스 사용 최적화
   - 오류 추적 및 처리
   - 안정성 테스트
   - 메모리 관리 개선

2. **업데이트 및 유지보수**
   - 자동 업데이트 시스템
   - 원격 구성 관리
   - 버전 관리 및 롤백
   - 변경 감지 및 적응

3. **확장 기능**
   - 추가 매장 지원
   - 고급 설정 옵션
   - 플러그인 시스템
   - 알림 메커니즘

## Risks and Mitigations

### Technical Challenges

1. **봇 감지 시스템 우회**
   - **위험**: reCAPTCHA v3가 자동화를 감지하고 차단할 수 있음
   - **완화 전략**: 
     - 인간형 행동 패턴 시뮬레이션 강화
     - 브라우저 지문 다양화 및 마스킹
     - 지연시간 및 무작위성 적용
     - 본인인증 단계에서 사용자 개입으로 점수 리셋

2. **다중 브라우저 리소스 관리**
   - **위험**: 4개 매장 동시 자동화 시 리소스 경쟁 및 성능 문제
   - **완화 전략**:
     - 매장별 리소스 할당 및 제한
     - 우선순위 기반 처리 순서 최적화
     - 비필수 프로세스 일시 중지 기능
     - 사용자 하드웨어에 따른 적응형 조정

3. **PASS 인증 순차 처리**
   - **위험**: 여러 매장 인증 중 세션 손실 또는 시간 초과
   - **완화 전략**:
     - 강력한 세션 상태 유지 메커니즘
     - 최적화된 인증 순서 알고리즘
     - 인증 대기 중 백그라운드 처리 최적화
     - 인증 시간 내 완료를 위한 명확한 가이드 제공

4. **웹사이트 구조 변경**
   - **위험**: 매장 웹사이트 업데이트로 인한 자동화 실패
   - **완화 전략**:
     - 다중 선택자 전략 및 대체 선택자
     - 동적 요소 인식 및 적응 알고리즘
     - 웹사이트 변경 감지 및 오류 보고
     - 원격 업데이트로 신속한 대응

### MVP Definition Challenges

1. **핵심 기능 범위 설정**
   - **위험**: 초기 버전에 너무 많은 기능 포함으로 개발 지연
   - **완화 전략**:
     - 단일 매장 지원으로 시작하여 검증
     - 핵심 자동화 흐름 우선 구현
     - 고급 기능은 후속 업데이트로
     - 사용자 피드백 기반 점진적 확장

2. **사용자 인터페이스 복잡성**
   - **위험**: 다중 매장 대시보드의 정보 과부하
   - **완화 전략**:
     - 직관적이고 단순한 카드 기반 UI
     - 정보의 계층적 구조화
     - 중요도에 따른 시각적 표현
     - 세부 정보는 필요시에만 표시

3. **기술 스택 통합**
   - **위험**: 여러 기술 스택 간 통합 문제
   - **완화 전략**:
     - 검증된 기술 조합 사용
     - 모듈식 아키텍처 설계
     - 철저한 통합 테스트
     - 명확한 인터페이스 정의

### Resource Constraints

1. **개발 리소스**
   - **위험**: 복잡한 다중 매장 자동화를 위한 개발 리소스 부족
   - **완화 전략**:
     - 모듈식 설계로 병렬 개발 가능
     - 코드 재사용 최대화
     - 공통 자동화 프레임워크 설계
     - 단계적 개발 접근법

2. **사용자 하드웨어 제한**
   - **위험**: 일부 사용자 시스템의 리소스 부족
   - **완화 전략**:
     - 하드웨어 요구사항 명확히 안내
     - 리소스 효율성 최적화
     - 낮은 사양에서도 작동하는 기본 모드
     - 선택적 기능 비활성화 옵션

3. **유지보수 부담**
   - **위험**: 여러 매장 지원으로 인한 유지보수 복잡성
   - **완화 전략**:
     - 공통 코드베이스와 매장별 어댑터 패턴
     - 자동화된 테스트 시스템
     - 원격 모니터링 및 진단
     - 사용자 보고 메커니즘

## Appendix

### UI/UX 디자인 명세

1. **대시보드 레이아웃**
   
   ```
   +--------------------------------------+
   |  [로고/제목]        [설정] [계정]      |
   +--------------------------------------+
   |                                      |
   |  [전체 상태 및 타이머]                 |
   |                                      |
   +------+------------+------------+-----+
   |      |            |            |     |
   | 매장1 |    매장2   |    매장3   | 매장4|
   |      |            |            |     |
   +------+------------+------------+-----+
   |                                      |
   |  [현재 인증 필요 매장 정보]            |
   |                                      |
   +--------------------------------------+
   |                                      |
   |  [예약 결과 및 상세 정보]              |
   |                                      |
   +--------------------------------------+
   ```

2. **색상 체계**
   - 주요 컬러: #1a1a1a (다크 그레이), #d4af37 (골드), #ffffff (화이트)
   - 상태 컬러: 
     - 대기: #3498db (블루)
     - 진행 중: #2ecc71 (그린)
     - 인증 필요: #f39c12 (오렌지)
     - 성공: #d4af37 (골드)
     - 실패: #e74c3c (레드)
   - 배경: 그라데이션 다크 테마 (#1a1a1a to #2c3e50)

3. **매장 상태 카드 디자인**
   ```
   +-----------------------------------+
   | [매장 로고] 매장명         [상태] |
   +-----------------------------------+
   |                                   |
   |  [원형 프로그레스 인디케이터 70%] |
   |                                   |
   +-----------------------------------+
   | 현재 단계: PASS 인증 필요         |
   | 마지막 업데이트: 1분 전           |
   +-----------------------------------+
   ```

### Rolex 예약 시스템 분석

1. **매장별 URL 구조**
   ```
   롯데 명동 (크로노다임): https://www.chronodigmwatch.co.kr/rolex/contact-seoul/appointment/
   현대 판교 (우노와치): https://www.unopangyo.com/rolex/contact-gyeonggi/
   현대 무역 (현대시계): https://www.hyundaiwatch.co.kr/rolex/contact-seoul/appointment/
   롯데 서면 (홍보시계): https://www.hongbowatch.co.kr/rolex/contact-busan/appointment/
   ```

2. **공통 예약 프로세스**
   - 모든 매장: 예약 목적 선택 → 주의사항 동의 → 날짜/시간 선택 → PASS 인증 → 개인정보 입력 → 확인
   - 매월 말일 자정(00:00)에 다음 달 예약 오픈
   - 모든 매장에서 reCAPTCHA v3 사용
   - 모든 매장에서 동일한 PASS 앱 인증 사용

3. **매장별 DOM 구조 특성**
   - 크로노다임: `.purpose-card` 클래스 사용, 선택자 `.fappointment .purpose-card`
   - 우노와치: `.booking-option` 클래스 사용, 선택자 `.booking-wrapper .booking-option`
   - 현대시계: `.appointment-choice` 클래스 사용, 선택자 `.appointment-section .appointment-choice`
   - 홍보시계: `.booking-card` 클래스 사용, 선택자 `.booking-container .booking-card`

### 시스템 요구사항

1. **하드웨어 요구사항**
   - CPU: 쿼드코어 2.5GHz 이상 (Intel Core i5 8세대 이상 또는 AMD Ryzen 5 이상)
   - RAM: 8GB 이상 (16GB 권장)
   - 디스크: 1GB 여유 공간 (SSD 권장)
   - 그래픽: 기본 통합 그래픽 이상
   - 네트워크: 안정적인 광대역 연결 (최소 10Mbps)

2. **소프트웨어 요구사항**
   - 운영체제: Windows 10 64비트 (버전 1903 이상) 또는 Windows 11
   - 브라우저: 자동 설치됨 (Chromium)
   - 기타: .NET Framework 4.7.2 이상, Visual C++ 2019 Redistributable

3. **권장 설정**
   - Windows 전원 설정: 고성능 모드
   - 디스플레이: 최소 1366x768 해상도
   - 인터넷 연결: 유선 연결 권장
   - 백그라운드 앱: 최소화